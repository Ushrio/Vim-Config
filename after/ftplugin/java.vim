function! java#DetectMaven()
    if glob("pom.xml") != "" && executable('mvn')
        " Assign makeprg to mvn
        set makeprg=mvn\ -Dstyle.color=never\ clean\ compile
       " Ignored message
        setlocal errorformat=
            \%-G[INFO]\ %.%#,
            \%-G[debug]\ %.%#
        " Error message for POM
        setlocal errorformat+=
            \[FATAL]\ Non-parseable\ POM\ %f:\ %m%\\s%\\+@%.%#line\ %l\\,\ column\ %c%.%#,
            \[%tRROR]\ Malformed\ POM\ %f:\ %m%\\s%\\+@%.%#line\ %l\\,\ column\ %c%.%#
        " Error message for compiling
        setlocal errorformat+=
            \[%tARNING]\ %f:[%l\\,%c]\ %m,
            \[%tRROR]\ %f:[%l\\,%c]\ %m
        " Message from JUnit 5(5.3.X), TestNG(6.14.X), JMockit(1.43), and AssertJ(3.11.X)
        setlocal errorformat+=
            \%+E%>[ERROR]\ %.%\\+Time\ elapsed:%.%\\+<<<\ FAILURE!,
            \%+E%>[ERROR]\ %.%\\+Time\ elapsed:%.%\\+<<<\ ERROR!,
            \%+Z%\\s%#at\ %f(%\\f%\\+:%l),
            \%+C%.%#

        echohl title | redraw | echom "Maven project detected" | echohl None
    elseif glob("mvnw") != "" || glob("mvnw.bat") != ""
        " Assign makeprg to mvnw
        set makeprg=mvnw\ clean\ compile
        " POM related messages
        setlocal errorformat=%E[ERROR]\ %#Non-parseable\ POM\ %f:\ %m\ %#\\@\ line\ %l\\,\ column\ %c%.%#,%Z,
        setlocal errorformat+=%+E[ERROR]\ %#Malformed\ POM\ %f:%m\ %#\\@\ %.%#\\,\ line\ %l\\,\ column\ %c%.%#,%Z,
        " Java related build messages
        setlocal errorformat+=%+I[INFO]\ BUILD\ %m,%Z
        setlocal errorformat+=%E[ERROR]\ %f:[%l\\,%c]\ %m,%Z
        setlocal errorformat+=%A[%t%[A-Z]%#]\ %f:[%l\\,%c]\ %m,%Z
        setlocal errorformat+=%A%f:[%l\\,%c]\ %m,%Z

        " jUnit related build messages
        setlocal errorformat+=%+E\ \ %#test%m,%Z
        setlocal errorformat+=%+E[ERROR]\ Please\ refer\ to\ %f\ for\ the\ individual\ test\ results.

        " Misc message removal
        setlocal errorformat+=%-G%.%#,%Z
        echohl title | redraw | echom "Maven project detected" | echohl None
    else
        " Assign default makeprg
        set makeprg=javac\ %:p
        " Assigns F9 to run the current Java file
        nnoremap <F9> :update<CR>:!java %:p:r<CR>
    endif
endfunction

" Set up make
augroup Project
    autocmd!
    autocmd BufEnter,BufNewFile,BufReadPost * silent call java#DetectMaven()
augroup END
augroup Make
    autocmd!
    autocmd BufWritePost * silent execute("Make!")
    autocmd QuickFixCmdPost cgetfile call s:ProcessQuickFixForMaven(getqflist())
    autocmd QuickFixCmdPost *make* call s:ProcessQuickFixForMaven(getqflist())
augroup END

" Assign F8 to compile the current Java file
nnoremap <F8> :update<CR>:silent make<CR>

" Use vim's built in help system with K
setlocal keywordprg=

" Setup :find command
set path^=src/**,config/**

" Because the path in message output by Maven has '/<fullpath>' in windows
" system, this function would adapt the path for correct path of jump voer
" quickfix
function! <SID>ProcessQuickFixForMaven(qflist)
	for qfentry in a:qflist
		" Get the filename coming from VIM's quickfix
		if has_key(qfentry, "filename")
			let filename = qfentry.filename
		elseif qfentry.bufnr > 0
			let filename = bufname(qfentry.bufnr)
		else
			let filename = ""
		endif
		" //:~)

		" ==================================================
		" Process the file name for:
		" 1. Fix wrong file name in Windows system
		" 2. Convert class name(<full class name>.<method name>) to file name for unit test
		" ==================================================
		"
		" The file name which comes from full class name of Java.
		" It maybe includes method name.
		if qfentry.type =~ '^[EW]$' && filename =~ '\v^\f+$' " The file name matches valid file format under OS
			call s:AdaptFilenameOfError(qfentry, filename)
		endif
		" //:~)
	endfor

	call setqflist(a:qflist, 'r')
endfunction

function! <SID>AdaptFilenameOfError(qfentry, rawFileName)
	let rawFileName = a:rawFileName
	let shellSlash = &shellslash ? '/' : '\\'

	" ==================================================
	" Fix the /C:/source.code path generated by maven-compiler-plugin 3.0
	" ==================================================
	let headingShellSlashOfWin32 = '\v^' . shellSlash . '[a-zA-Z]:' . shellSlash
	if has("win32") && rawFileName =~ headingShellSlashOfWin32
		let a:qfentry.filename = substitute(rawFileName, '^' . shellSlash, '', '')
		unlet a:qfentry.bufnr
	endif
	" //:~)
endfunction
